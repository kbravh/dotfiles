# Create a directory and move into it
take () {
  mkdir -pv -- "$1" && cd  -- "$1"
}

# Clone a git repo and move into the directory
clone () {
  repo="$1" # stores repo name in variable
  if [ -n "$2" ] # checks if a custom directory name was passed in
    then repo_name="$2" # if so, welll use that as the directory
    else # otherwise, we'll grab it from the URL
      repo_name=${repo##*/} # strips off all leading info before repo name
      repo_name=${repo_name%%.git} # strips off git extension
  fi
   git clone $repo $repo_name # clone the project
   cd $repo_name # change into the directory
}

# Extract the specified archive
ex () {
  if [ -f "$1" ] ; then
    case "$1" in
      *.tar.bz2)  tar -xjf "$1" -C "$(basename "$1" .tar.bz2)"   ;;
      *.tar.gz)   tar -xzf "$1" "$(basename "$1" .tar.gz)"   ;;
      *.bz2)      bunzip2  "$1"                                ;;
      *.zip)      unzip    "$1" -d "$(basename "$1" .zip)"      ;;
      *.cbz)      unzip    "$1" -d "$(basename "$1" .cbz)"      ;;
      *.rar)      unrar -x "$1" -d "$(basename "$1" .rar)"      ;;
      *.cbr)      unrar -x "$1" -d "$(basename "$1" .cbr)"      ;;
      *.gz)       gunzip   "$1"                                ;;
      *.tar)      tar -xf  "$1" -C "$(basename "$1" .tar)"      ;;
      *.tbz2)     tar -xjf "$1" -C "$(basename "$1" .tbz2)"     ;;
      *.tgz)      tar -xzf "$1" -C "$(basename "$1" .tgz)"      ;;
      *.Z)        uncompress "$1"                              ;;
      *.7z)       7z -x    "$1" -o"$(basename "$1" .7z)"        ;;
      *)          echo    "$1 cannot be extracted via ex()"     ;;
    esac
  else
    echo "$1 is not a valid file"
  fi
}

# Clean up dangling docker containers
dangle () {
  for image in $(docker images -qa -f 'dangling=true' | xargs)
  do
    echo "Removing image $image"
    docker rmi -f $image &> /dev/null
  done
}

# Attaches a Spanish audio track to a video file
spanish () {
  ffmpeg -i $1 -i $2 -map 0 -map 1:a -c:v copy -shortest -metadata:s:a:1 title="Espa√±ol" -metadata:s:a:1 language=spa $3
}

# Encodes url strings
urlencode() {
    old_lc_collate=$LC_COLLATE
    LC_COLLATE=C

    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:$i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf '%s' "$c" ;;
            *) printf '%%%02X' "'$c" ;;
        esac
    done

    LC_COLLATE=$old_lc_collate
}

# Decodes url strings
urldecode() {
    local url_encoded="${1//+/ }"
    printf '%b' "${url_encoded//%/\\x}"
}

# Encode videos to h.265/HEVC
hevc() {
  for filename in $1; do
    # Get codecs
    video_codec=$(ffprobe -v error -select_streams 'v:0' -show_entries stream=codec_name -of default=nokey=1:noprint_wrappers=1 "${filename}")
    audio_codec=$(ffprobe -v error -select_streams 'a:0' -show_entries stream=codec_name -of default=nokey=1:noprint_wrappers=1 "${filename}")

    if [ "$video_codec" = "hevc" ]; then
        echo "Skipping (already HVC1): ${filename}"
    else
        #video_opts="-c:v libx265 -crf 28 -tag:v hvc1 -preset slow"
        if [ "$audio_codec" = "aac" ]; then
            #audio_opts="-c:a copy"
            ffmpeg -i "${filename}" -c:v libx265 -crf 28 -tag:v hvc1 -preset slow -c:a copy "${filename%.*}.hvc1.mp4"
        else
            #audio_opts="-c:a aac -b:a 128k"
            ffmpeg -i "${filename}" -c:v libx265 -crf 28 -tag:v hvc1 -preset slow -c:a aac -b:a 128k "${filename%.*}.hvc1.mp4"
        fi
    fi
  done
}

# Shows the process using a specified port number
port() {
  lsof -i :$1
}
